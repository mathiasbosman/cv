<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <artifactId>mathiasbosman-app</artifactId>
  <build>
    <plugins>
      <plugin>
        <artifactId>appengine-maven-plugin</artifactId>
        <configuration>
          <projectId>GCLOUD_CONFIG</projectId>
          <promote>${promoteOnDeploy}</promote>
          <version>${project.version}</version>
        </configuration>
        <groupId>com.google.cloud.tools</groupId>
        <version>2.2.0</version>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <!-- Delete generated folders in frontend folder-->
            <fileset>
              <directory>${frontend.directory}/node_modules</directory>
            </fileset>
            <fileset>
              <directory>${frontend.directory}/node</directory>
            </fileset>
            <fileset>
              <directory>${frontend.directory.build}</directory>
            </fileset>
          </filesets>
          <followSymLinks>false</followSymLinks>
        </configuration>
        <groupId>org.apache.maven.plugins</groupId>
      </plugin>
      <plugin>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <addResources>true</addResources>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
        <groupId>org.springframework.boot</groupId>
      </plugin>
      <plugin>
        <artifactId>frontend-maven-plugin</artifactId>
        <configuration>
          <nodeVersion>${node.version}</nodeVersion>
          <npmVersion>${npm.version}</npmVersion>
          <skip>${skipFrontend}</skip>
          <workingDirectory>${frontend.directory}</workingDirectory>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <id>install node and npm</id>
            <phase>generate-resources</phase>
          </execution>
          <execution>
            <configuration>
              <arguments>install</arguments>
            </configuration>
            <goals>
              <goal>npm</goal>
            </goals>
            <id>npm install</id>
            <phase>generate-resources</phase>
          </execution>
          <execution>
            <configuration>
              <arguments>run test</arguments>
              <skip>${skipFrontendTests}</skip>
            </configuration>
            <goals>
              <goal>npm</goal>
            </goals>
            <id>frontend unit tests</id>
            <phase>test</phase>
          </execution>
          <execution>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
            <goals>
              <goal>npm</goal>
            </goals>
            <id>react build</id>
            <phase>compile</phase>
          </execution>
        </executions>
        <groupId>com.github.eirslett</groupId>
        <version>${frontend.mavenPlugin.version}</version>
      </plugin>

      <plugin>
        <artifactId>docker-compose-maven-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <awaitTimeout>10</awaitTimeout>
              <composeFile>${docker-compose.file}</composeFile>
              <detachedMode>true</detachedMode>
              <projectName>${docker-project}</projectName>
              <skip>${skipDocker}</skip>
            </configuration>
            <goals>
              <goal>up</goal>
            </goals>
            <id>bring-docker-containers-up</id>
            <phase>validate</phase>
          </execution>
          <execution>
            <configuration>
              <composeFile>${docker-compose.file}</composeFile>
              <projectName>${docker-project}</projectName>
              <removeVolumes>true</removeVolumes>
              <skip>${skipDocker}</skip>
            </configuration>
            <goals>
              <goal>down</goal>
            </goals>
            <id>bring-docker-containers-down</id>
            <phase>post-integration-test</phase>
          </execution>
        </executions>
        <groupId>com.dkanejs.maven.plugins</groupId>
        <version>${docker.mavenPlugin.version}</version>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}/static</outputDirectory>
              <resources>
                <resource>
                  <directory>${frontend.directory.build}</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <id>position-react-build</id>
            <phase>prepare-package</phase>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Spring -->
    <dependency>
      <artifactId>spring-boot-starter</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-boot-starter-web</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-boot-starter-security</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <!-- testing -->
    <dependency>
      <artifactId>spring-boot-starter-test</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>junit-vintage-engine</artifactId>
          <groupId>org.junit.vintage</groupId>
        </exclusion>
      </exclusions>
      <groupId>org.springframework.boot</groupId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <artifactId>junit-jupiter-api</artifactId>
      <groupId>org.junit.jupiter</groupId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <artifactId>spring-security-test</artifactId>
      <groupId>org.springframework.security</groupId>
    </dependency>

    <!-- persistency -->
    <dependency>
      <artifactId>flyway-core</artifactId>
      <groupId>org.flywaydb</groupId>
    </dependency>
    <dependency>
      <artifactId>postgresql</artifactId>
      <groupId>org.postgresql</groupId>
    </dependency>

    <!-- cloud -->
    <dependency>
      <artifactId>google-cloud-logging-logback</artifactId>
      <groupId>com.google.cloud</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-cloud-gcp-starter</artifactId>
      <groupId>com.google.cloud</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-cloud-gcp-starter-sql-postgresql</artifactId>
      <groupId>com.google.cloud</groupId>
    </dependency>
    <dependency>
      <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>
      <groupId>com.google.cloud</groupId>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <artifactId>spring-cloud-gcp-dependencies</artifactId>
        <groupId>com.google.cloud</groupId>
        <scope>import</scope>
        <type>pom</type>
          <version>2.0.2</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <description>Personal CV and blog</description>
  <groupId>be.mathiasbosman</groupId>
  <modelVersion>4.0.0</modelVersion>

  <name>mathiasbosman-app</name>

  <parent>
    <artifactId>spring-boot-starter-parent</artifactId>
    <groupId>org.springframework.boot</groupId>
    <relativePath/>
    <version>2.4.3</version> <!-- lookup parent from repository -->
  </parent>

  <properties>
    <!-- backend -->
    <docker-compose.file>${project.basedir}/docker-compose-test.yml</docker-compose.file>
    <docker-project>ut</docker-project>

    <!-- frontend -->
    <docker.mavenPlugin.version>4.0.0</docker.mavenPlugin.version>
    <frontend.directory>${project.basedir}/src/main/webapp</frontend.directory>
    <frontend.directory.build>${frontend.directory}/build</frontend.directory.build>
    <frontend.mavenPlugin.version>1.11.0</frontend.mavenPlugin.version>
    <java.version>11</java.version>

    <!-- docker (for testing) -->
    <maven.resourcesPlugin.version>3.2.0</maven.resourcesPlugin.version>
    <node.version>v14.15.1</node.version>
    <npm.version>6.14.8</npm.version>

    <!-- deployment -->
    <promoteOnDeploy>false</promoteOnDeploy>
    <skipDocker>${skipTests}</skipDocker>

    <!-- cloud -->
    <skipFrontend>false</skipFrontend>
    <skipFrontendTests>${skipFrontend}</skipFrontendTests>

    <!-- flags -->
    <skipTests>false</skipTests>
    <start-class>be.mathiasbosman.cv.CvApplication</start-class>
  </properties>
  <version>snapshot</version> <!-- Gets changed when published by GitHub -->
</project>
