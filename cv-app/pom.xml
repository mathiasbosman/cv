<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>cv</artifactId>
    <groupId>be.mathiasbosman</groupId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>cv-app</artifactId>

  <dependencies>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Persistency -->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>${frontend.directory.build}</directory>
        <targetPath>${project.build.directory}/classes/static</targetPath>
        <filtering>false</filtering>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <followSymLinks>false</followSymLinks>
          <filesets>
            <!-- Delete generated folders in frontend folder-->
            <fileset>
              <directory>${frontend.directory}/node_modules</directory>
            </fileset>
            <fileset>
              <directory>${frontend.directory}/node</directory>
            </fileset>
            <fileset>
              <directory>${frontend.directory.build}</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <executable>true</executable>
          <mainClass>${application.class}</mainClass>
        </configuration>
        <executions>
          <execution>
            <id>provide build information</id>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
          <execution>
            <id>repackage as executable jar</id>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <configuration>
          <nodeVersion>${node.version}</nodeVersion>
          <npmVersion>${npm.version}</npmVersion>
          <workingDirectory>${frontend.directory}</workingDirectory>
        </configuration>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>
          <execution>
            <id>npm install</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>react build</id>
            <phase>compile</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.dkanejs.maven.plugins</groupId>
        <artifactId>docker-compose-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>bring-docker-containers-up</id>
            <phase>validate</phase>
            <goals>
              <goal>up</goal>
            </goals>
            <configuration>
              <!-- seconds -->
              <awaitTimeout>10</awaitTimeout>
              <composeFile>${docker-compose.file}</composeFile>
              <projectName>${docker-project}</projectName>
              <detachedMode>true</detachedMode>
            </configuration>
          </execution>
          <execution>
            <id>bring-docker-containers-down</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>down</goal>
            </goals>
            <configuration>
              <composeFile>${docker-compose.file}</composeFile>
              <projectName>${docker-project}</projectName>
              <removeVolumes>true</removeVolumes>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>